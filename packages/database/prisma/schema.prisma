datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum Gender {
  male
  female
}

model ApiToken {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  name        String
  token       String    @unique
  description String?
  expiredAt   DateTime? @db.Timestamptz()
  createdAt   DateTime? @default(now()) @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String?
  gender    Gender?
  avatar    String?
  username  String   @unique
  password  String
  updatedAt DateTime @updatedAt @db.Timestamptz()
  createdAt DateTime @default(now()) @db.Timestamptz()

  apiTokens ApiToken[]
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  deviceId  String   @db.Uuid
  name      String
  data      Json     @db.JsonB
  updatedAt DateTime @updatedAt @db.Timestamptz()
  createdAt DateTime @default(now()) @db.Timestamptz()

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@unique([deviceId, name])
}

model Logs {
  id        String    @id @default(uuid()) @db.Uuid
  deviceId  String    @db.Uuid
  level     Int?
  time      DateTime? @db.Timestamptz()
  pid       Int?
  hostname  String?
  name      String?
  node      Json?     @db.JsonB
  msg       String?
  trace     String?
  meta      Json?     @db.JsonB
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  createdAt DateTime  @default(now()) @db.Timestamptz()

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Device {
  id        String  @id @default(uuid()) @db.Uuid
  contactId String? @db.Uuid
  name      String
  qr        String?
  status    String?

  startedAt DateTime? @db.Timestamptz()
  stoppedAt DateTime? @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  createdAt DateTime  @default(now()) @db.Timestamptz()

  owner    Contact?  @relation("ownDevice", fields: [contactId], references: [id], onDelete: Cascade)
  contacts Contact[] @relation("devices")
  sessions Session[]
  logs     Logs[]
  chats    Chat[]
}

model Contact {
  id           String   @id @default(uuid()) @db.Uuid
  jid          String   @unique
  deviceId     String   @db.Uuid
  name         String?
  notify       String?
  status       String?
  verifiedName String?
  avatar       String?
  updatedAt    DateTime @updatedAt @db.Timestamptz()
  createdAt    DateTime @default(now()) @db.Timestamptz()

  chats     Chat[]
  messages  Message[]
  devices   Device    @relation("devices", fields: [deviceId], references: [id], onDelete: Cascade)
  ownDevice Device[]  @relation("ownDevice")
}

model Chat {
  id        String @id @default(uuid()) @db.Uuid
  contactId String @db.Uuid
  deviceId  String @db.Uuid

  jid         String  @unique
  displayName String?
  name        String?
  description String?

  readOnly   Boolean? @default(false) @db.Boolean
  support    Boolean? @default(false) @db.Boolean
  shareOwnPn Boolean? @default(false) @db.Boolean
  suspended  Boolean? @default(false) @db.Boolean
  terminated Boolean? @default(false) @db.Boolean

  unreadCount        Int? @default(0)
  unreadMentionCount Int? @default(0)

  createdBy String?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  contact  Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  device   Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id        String @id @default(uuid()) @db.Uuid
  contactId String @db.Uuid
  chatId    String @db.Uuid

  keyId     String
  remoteJid String
  fromMe    Boolean @default(false) @db.Boolean
  type      String

  title     String?
  text      String?
  media     String?
  mediaType String?

  stubType               Int?
  status                 Int?
  revokeMessageTimestamp DateTime? @db.Timestamptz()
  messageTimestamp       DateTime? @db.Timestamptz()
  viewOnce               Boolean   @default(false) @db.Boolean
  broadcast              Boolean   @default(false) @db.Boolean
  messageContextInfo     Json      @db.JsonB

  updatedAt DateTime? @updatedAt @db.Timestamptz()
  createdAt DateTime? @default(now()) @db.Timestamptz()

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([keyId, remoteJid])
}

model AppSession {
  id        String    @id @default(uuid()) @db.Uuid
  sid       String    @unique
  data      Json      @db.JsonB
  expiresAt DateTime? @db.Timestamptz()
}
